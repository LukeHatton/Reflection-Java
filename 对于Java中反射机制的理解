//这是我个人对于反射机制学习的一点心得
  Java不是一种动态语言,但它又被大量地使用于经常需要扩展功能服务器端,是因为有一种突出的动态
机制:反射(Reflection).

  反射机制(Reflection)被引入Java中,以便能够提供动态机制,即在运行时分析类的能力,或者说:
能够在对一个类的详细信息一无所知(除了它本身的.class文件)的情况下,仍能够对这个类进行一些操
作,例如调用方法,或创建对象等.
  
  在Java程序运行时,系统始终为一个对象维护着一个唯一的类型标识,在这个类型标识中存储着对象的
全部息,这些信息被保存在一个专门的类的对象中,这个用作存储信息的类就是Class类.在逻辑上可以这
样认为:通过一个类本身,来创建一个它的Class对象,这个类就是创建Class=对象时使用的参数,因此类
的Class对象是唯一的.下面以String类为例,演示了三种常用的获取类的Class对象的方法.
  
  1.通过类名获取 	      
                    Class classObj = String.class;
  2.通过类的对象获取    
                    Class classObj = new String().getClass();
  3.通过Class类的静态方法,使用含包名的全类名获取
                    Class classObj = Class.forName("java.lang.String");
     
  要注意的是,第三种方法根据提供的全类名获取Class对象,可能会因为输入了错误的类名而抛出
ClassNotFoundException异常,使用时需要捕获或者继续向上抛出异常.
  
  在完成了对于类的Class对象的获取后,就可以着手进行类分析和处理的工作了,这也是反射机制被引
入到Java中最重要的作用.

  在java.lang.reflect(反射)包中,包含着三个非常重要的工具类:Field(域),Method(方法),
Constructo(构造器),分别用来描述目标类的域,方法,和构造方法,使用要分析的类的Class对象作为隐
式参数调用相对的get方法会返回分别封装了该类的Field,Method,或Constroctor对象的数组.
  
  常用的get方法的命名构成格式为可以以如下方法记忆:
               get+(Declared)+获取的目标信息类名+() //Declared用来标记获取私有变量或方法
  
  例:假如我们现在要获取String(字符串)类中包含的全部域(field)且要包含私有域的信息,根据上述
格式,可以推断其方法命名应为:
                    getDeclaredField();
   应该用一个Field的数组进行接收
                    Field[] stringField = String.class.getDeclaredField();
                    //这里的String.class也可以替换成用另两种方式获取的Class对象
   或者,要获取String类中包含的全部方法(method)且不含私有方法
                    Method[] stringmethod = String.class.getMethod();
  
  查询API会发现该方法确实是如此命名的.得益于官方类库的良好的命名规范(方法名要用小驼峰),我们
可以使用这种简单记法.
