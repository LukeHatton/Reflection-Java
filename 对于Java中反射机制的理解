//这是我个人对于反射机制学习的一点心得
  Java不是一种动态语言,但它又被大量地使用于经常需要扩展功能服务器端,是因为有一种突出的动态
机制:反射(Reflection).

  反射机制(Reflection)被引入Java中,以便能够提供动态机制,即在运行时分析类的能力,或者说:
能够在对一个类的详细信息一无所知(除了它本身的.class文件)的情况下,仍能够对这个类进行一些操
作,例如调用方法,或创建对象等.
  
  在Java程序运行时,系统始终为一个对象维护着一个唯一的类型标识,在这个类型标识中存储着对象的
全部息,这些信息被保存在一个专门的类的对象中,这个用作存储信息的类就是Class类.在逻辑上可以这
样认为:通过一个类本身,来创建一个它的Class对象,这个类就是创建Class=对象时使用的参数,因此类
的Class对象是唯一的.下面以String类为例,演示了三种常用的获取类的Class对象的方法.
  
  1.通过类名获取 	      
                    Class classObj = String.class;
  2.通过类的对象获取    
                    Class classObj = new String().getClass();
  3.通过Class类的静态方法,使用含包名的全类名获取
                    Class classObj = Class.forName("java.lang.String");
     
  要注意的是,第三种方法根据提供的全类名获取Class对象,可能会因为输入了错误的类名而抛出
ClassNotFoundException异常,使用时需要捕获或者继续向上抛出异常.
